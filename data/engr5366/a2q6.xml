<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright (C) 2010 Andrew Wilson.
  All rights reserved.
  Contact email: amwgeo@gmail.com

  This file is part of xmlMine-Vent

  xmlMine-Vent is free software: you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation, either
  version 3 of the License, or (at your option) any later version.

  xmlMine-Vent is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with xmlMine-Vent.  If not, see
  <http://www.gnu.org/licenses/>.

 -->
<ventNetwork xmlns="http://xmlmine.org/xml/ventilation/" version="0.1">

<title>2009W-ENGR5366 A2Q6 Regulated Ventilation</title>
<desc>This script solves the given ventilation system for a range of fan fixed pressure values for both the main fan.  The goal is to identify the optimal pressure balance to minimize the total fan power requirements.</desc>

<fanList>
	<!-- NOTE: using fan static pressure in Pascals -->
	<fan id="main_fan" pressure="1200" />
	<fan id="booster_fan" pressure="400" />
</fanList>

<junctionList>
	<junction id="1" x="100" y="200" z="100" surface="true" pressure="0" />
	<junction id="2" x="100" y="200" z="0" />
	<junction id="3" x="0" y="200" z="0" />
	<junction id="4" x="0" y="100" z="0" />
	<junction id="5" x="100" y="100" z="0" />
	<junction id="6" x="300" y="200" z="0" />
	<junction id="7" x="400" y="200" z="0" />
	<junction id="8" x="400" y="100" z="0" />
	<junction id="9" x="200" y="100" z="0" />
	<junction id="10" x="200" y="200" z="0" />
	<junction id="11" x="100" y="100" z="100" surface="true" />
	<junction id="12" x="300" y="0" z="0" />
	<junction id="13" x="200" y="0" z="0" />
</junctionList>

<branchList>
	<branch id="freshair1" from="1" to="2" resistance="0.2" />	<branch id="branch2" from="2" to="3" resistance="0.25" />	<branch id="workplace3" from="3" to="4" resistance="2" flow="10" />	<branch id="branch4" from="4" to="5" resistance="0.3" />	<branch id="branch5" from="2" to="5" resistance="20" />	<branch id="branch6" from="2" to="10" resistance="0.05" />	<branch id="branch7" from="10" to="6" resistance="0.1" />	<branch id="branch8" from="6" to="7" resistance="0.1" />	<branch id="workplace9" from="7" to="8" resistance="2" flow="11" />	<branch id="branch10" from="8" to="9" resistance="0.15" />	<branch id="branch11" from="6" to="12" resistance="0.16" />	<branch id="workplace12" from="12" to="13" resistance="2" flow="12" />	<branch id="branch13" from="13" to="9" resistance="0.2" />	<branch id="branch14" from="10" to="9" resistance="15" />	<branch id="branch15" from="9" to="5" resistance="0.25" fan="#booster_fan" />	<branch id="returnair16" from="5" to="11" resistance="0.3" fan="#main_fan" /></branchList>

<script type="ECMAScript"><![CDATA[
// helper functions
QFile.prototype.writeLine = function( line ) {
    this.write( new QByteArray( line + "\n" ) );
}

// setup variables
var main = net.getFanDefinition( "main_fan" );
var boost = net.getFanDefinition( "booster_fan" );
var i16 = net.findBranchIndex( "returnair16" );
var i15 = net.findBranchIndex( "branch15" );

// setup output file
var fileName = "a2q6.csv";
var outFile = new QFile( fileName );
if( !outFile.open( QIODevice.OpenMode(QIODevice.WriteOnly, QIODevice.Text) ) ) {
    throw outFile.errorString();
}
outFile.writeLine( "FSP16,Q16,FSP15,Q15,FSP3,FSP9,FSP12,RR3,RR9,RR12" );
outFile.writeLine( "[Pa],[m3/s],[Pa],[m3/s],[Pa],[Pa],[Pa],[Ns2/m8],[Ns2/m8],[Ns2/m8]" );

// solve network for range of pressures
for( main.fixedPressure = 1000; main.fixedPressure <= 1500; main.fixedPressure += 100 ) {
    for( boost.fixedPressure = 100; boost.fixedPressure <= 500; boost.fixedPressure += 100 ) {
        solver.solve();

        // calculate fixed flow branch FSP, or R (sign dependent)
        var pFixed = solver.fixedFlowPressure();
        var fsp = "";
        var r = "";
        for( var i in pFixed ) {
            p = pFixed[i];
            if( p > 0. ) {   // Fan
                fsp += "," + p.toFixed(2);
                r += ",";
            } else {         // Regulator
                fsp += ",";
                r += "," + (-p.toFixed(5));
            }
        }

        // write output
        var line = main.fixedPressure.toFixed(0) + "," + solver.flow[i16].toFixed(3) + ",";
        line += boost.fixedPressure.toFixed(0) + ","  + solver.flow[i15].toFixed(3);
        line += fsp + r;
        outFile.writeLine( line );
    }
}

// close the output file
outFile.close();

]]></script>

</ventNetwork>